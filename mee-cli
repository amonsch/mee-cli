#!/usr/bin/env python

""" JSON Table """

import json

from pygments.lexers.sql import SqlLexer
from pygments.styles import get_style_by_name

from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.shortcuts import PromptSession
from prompt_toolkit.history import FileHistory
from prompt_toolkit.styles import style_from_pygments_cls
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.validation import Validator, ValidationError

import sql_mojo_parser as parser


KEYWORDS = [
    "SELECT", "FROM", "WHERE", "GROUP", "ORDER BY", "LIMIT",  # ... etc.
]


def load_linewise_json(filename):
    table = {}
    with open(filename, mode="r") as jsonfile:
        for line in jsonfile:
            row = json.loads(line)
            table[row["id"]] = row

    return table


def query(stmt):
    assert stmt["type"] == "select"

    try:
        table = load_linewise_json(stmt["table"]["value"])
    except FileNotFoundError:
        return

    for row in table.values():
        yield {
            column["value"]: row[column["value"]]
            for column in stmt["columns"]
        }


def validate(text):
    text = text.strip().rstrip(";")
    if not text:
        return

    try:
        return parser.yacc.parse(text)
    except SyntaxError as exc:
        raise ValidationError(message="Your SQL is WRONG!!")


def main():
    completer = WordCompleter(KEYWORDS, ignore_case=True)
    style = get_style_by_name("monokai")
    history = FileHistory(".mee_history")
    session = PromptSession(
        " >>> ",
        history=history,
        lexer=PygmentsLexer(SqlLexer),
        style=style_from_pygments_cls(style),
        completer=completer,
        complete_while_typing=False,
        validator=Validator.from_callable(validate),
        validate_while_typing=False,
    )
    while True:
        try:
            stmt = session.prompt()
            parsed = parser.yacc.parse(stmt)
            result = list(query(parsed))
            if result:
                print(json.dumps(result, indent=2))
            else:
                print("No results found")
        except EOFError:
            break


if __name__ == "__main__":
    main()
