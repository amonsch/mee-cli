#!/usr/bin/env python

""" Key bindings """

import contextlib
import functools
import json
import operator
import subprocess
import time

from pygments.lexers.sql import SqlLexer
from pygments.styles import get_style_by_name

from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.shortcuts import PromptSession
from prompt_toolkit.history import FileHistory
from prompt_toolkit.styles import style_from_pygments_cls
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.key_binding import KeyBindings

import tabulate

import sql_mojo_parser as parser


KEYWORDS = [
    "SELECT", "FROM", "WHERE", "GROUP", "ORDER BY", "LIMIT",  # ... etc.
]

bindings = KeyBindings()


def load_linewise_json(filename):
    table = {}
    with open(filename, mode="r") as jsonfile:
        for line in jsonfile:
            row = json.loads(line)
            table[row["id"]] = row

    return table


def query(stmt):
    assert stmt["type"] == "select"

    try:
        table = load_linewise_json(stmt["table"]["value"])
    except FileNotFoundError:
        return

    checks = {}
    cond = stmt.get("condition")
    if cond:
        if cond["op"] == '=':
            op = operator.eq
        elif cond["op"] == '!=':
            op = operator.eq

        checks[cond["args"][0]["value"]] = functools.partial(
            op,
            cond["args"][1]["value"],
        )

    for row in table.values():
        result = {}
        for column in stmt["columns"]:
            colname = column["value"]
            try:
                colvalue = row[colname]
            except KeyError:
                continue

            check = checks.get(colname)
            if check and not check(colvalue):
                break

            result[colname] = colvalue
        else:
            if result:
                yield result


def validate(text):
    text = text.strip().rstrip(";")
    if not text:
        return

    try:
        return parser.yacc.parse(text)
    except SyntaxError as exc:
        raise ValidationError(message="Your SQL is WRONG!!")


class Toolbar:
    def __init__(self, text):
        self.text = text

    def __call__(self):
        return self.text


@contextlib.contextmanager
def pager(command="less", options=None):
    # Pager Options:
    # -F: Quit less if the entire content can be displayed on the first
    #     page.
    # -R: Display raw control characters.
    # -S: Disable line wrapping.
    # -X: Avoid clearing the screen on de-initialization. This in
    #     combination with the -F option allows a content sensitive
    #     triggering of less.
    command_list = [command]
    if options:
        command_list.extend([options])
    pager = subprocess.Popen(command_list, stdin=subprocess.PIPE)

    yield pager.stdin

    pager.stdin.close()
    pager.wait()


@bindings.add("c-q")
def quit(event):
    event.app.exit()


def main():
    completer = WordCompleter(KEYWORDS, ignore_case=True)
    style = get_style_by_name("monokai")
    history = FileHistory(".mee_history")
    toolbar = Toolbar("Inital toolbar Text")
    session = PromptSession(
        " >>> ",
        history=history,
        lexer=PygmentsLexer(SqlLexer),
        style=style_from_pygments_cls(style),
        completer=completer,
        complete_while_typing=False,
        validator=Validator.from_callable(validate),
        validate_while_typing=False,
        bottom_toolbar=toolbar,
        auto_suggest=AutoSuggestFromHistory(),
        key_bindings=bindings,
    )
    while True:
        try:
            stmt = session.prompt()
            if not stmt:
                print("Good Bye!")
                break

            timing = time.time()
            parsed = parser.yacc.parse(stmt)
            result = list(query(parsed))
            timing = (time.time() - timing) * 1000

            if result:
                with pager(options="-FRSX") as less:
                    less.write(
                        tabulate.tabulate(
                            [row.values() for row in result],  # data
                            result[0].keys(),                  # header
                            tablefmt="psql",
                        ).encode("utf-8")
                    )

            hits = result and len(result) or 0
            toolbar.text = f" -- Result count: {hits} -- took: {timing:.2f} ms"
        except EOFError:
            break


if __name__ == "__main__":
    main()
